---
// No server-side logic needed
import '../styles/global.css';
---
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Question Generator</title>
</head>
<body>
    <main>
        <h1>Question Generator</h1>
        <div id="question-container">
            <p id="question-display">Click the button to get a question!</p>
            <div id="loader" class="hidden"></div>
        </div>
        <div id="facilitator-display"></div>
        <button id="new-question-btn">
            Get New Question
        </button>
    </main>

    <script>
        const questionDisplay = document.getElementById('question-display');
        const newQuestionBtn = document.getElementById('new-question-btn') as HTMLButtonElement;
        const loader = document.getElementById('loader');
        const facilitatorDisplay = document.getElementById('facilitator-display');
        const mainElement = document.querySelector('main');

        // Pop song lyrics for button text (3-4 words with verb + noun)
        const buttonTexts = [
            "Dance the Night",
            "Shake it Off",
            "Break the Rules",
            "Light the Fire",
            "Move the Mountains",
            "Touch the Sky",
            "Break the Chain",
            "Light the Way",
            "Dance with Me",
            "Shake the World",
            "Break the Mold",
            "Light the Spark",
            "Move the Earth",
            "Touch the Stars",
            "Break the Ice",
            "Light the Flame"
        ];

        // Sample team members (you can replace with actual team names)
        const teamMembers = [
            "Alex", "Sam", "Jordan", "Taylor", "Casey", "Morgan", 
            "Riley", "Quinn", "Avery", "Blake", "Drew", "Emery",
            "Finley", "Gray", "Harper", "Indigo", "Jules", "Kai"
        ];

        let recentFacilitators: string[] = [];
        let currentButtonTextIndex = 0;

        function updateButtonText() {
            if (newQuestionBtn) {
                newQuestionBtn.textContent = buttonTexts[currentButtonTextIndex];
                currentButtonTextIndex = (currentButtonTextIndex + 1) % buttonTexts.length;
            }
        }

        function selectNextFacilitator(): string {
            const availableMembers = teamMembers.filter(member => 
                !recentFacilitators.includes(member)
            );
            
            if (availableMembers.length === 0) {
                // If all members have been recent facilitators, reset the list
                recentFacilitators = [];
                return teamMembers[Math.floor(Math.random() * teamMembers.length)];
            }
            
            const selectedMember = availableMembers[Math.floor(Math.random() * availableMembers.length)];
            
            // Add to recent facilitators and keep only last 3
            recentFacilitators.push(selectedMember);
            if (recentFacilitators.length > 3) {
                recentFacilitators.shift();
            }
            
            return selectedMember;
        }

        function showFacilitator(facilitator: string) {
            if (facilitatorDisplay) {
                facilitatorDisplay.textContent = `Next Facilitator: ${facilitator}`;
                facilitatorDisplay.classList.add('show');
            }
        }

        function animatePage() {
            if (mainElement) {
                mainElement.classList.add('animate');
                setTimeout(() => {
                    mainElement.classList.remove('animate');
                }, 600);
            }
        }

        if (questionDisplay && newQuestionBtn && loader && facilitatorDisplay) {
            // Initialize button text
            updateButtonText();

            newQuestionBtn.addEventListener('click', async () => {
                // Show loader and hide text
                loader.classList.remove('hidden');
                questionDisplay.classList.add('hidden');
                facilitatorDisplay.classList.remove('show');
                newQuestionBtn.disabled = true;

                // Animate the page
                animatePage();

                try {
                    // Get API key from environment variable
                    const GEMINI_API_KEY = import.meta.env.PUBLIC_GEMINI_API_KEY;
                    
                    // Check if API key is available
                    if (!GEMINI_API_KEY) {
                        throw new Error('Gemini API key is not configured. Please set the PUBLIC_GEMINI_API_KEY environment variable.');
                    }

                    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
                    
                    const questionPrompt = "Generate one, and only one, fun and lighthearted icebreaker question suitable for a professional team meeting. Do not add any preamble, quotation marks, or extra text. Just the question itself.";

                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            contents: [{
                                parts: [{ text: questionPrompt }]
                            }]
                        })
                    });

                    if (!response.ok) {
                        const errorBody = await response.text();
                        console.error("Gemini API Error:", errorBody);
                        throw new Error(`Gemini API responded with status: ${response.status}`);
                    }

                    const data = await response.json();
                    const question = data.candidates[0].content.parts[0].text.trim();
                    questionDisplay.textContent = question;

                    // Select and show next facilitator
                    const nextFacilitator = selectNextFacilitator();
                    showFacilitator(nextFacilitator);

                    // Update button text
                    updateButtonText();

                } catch (error) {
                    console.error("Error fetching question:", error);
                    questionDisplay.textContent = "Sorry, something went wrong. Please try again!";
                } finally {
                    // Hide loader and show text
                    loader.classList.add('hidden');
                    questionDisplay.classList.remove('hidden');
                    newQuestionBtn.disabled = false;
                }
            });
        }
    </script>
</body>
</html> 