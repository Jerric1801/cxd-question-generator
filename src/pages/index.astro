---
// No server-side logic needed
import '../styles/global.css';
---
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Question Generator</title>
</head>
<body>
    <main>
        <h1>Question Generator</h1>
        <div id="question-container">
            <p id="question-display">Click the button to get a question!</p>
            <div id="loader" class="hidden"></div>
        </div>
        <button id="new-question-btn">
            Get New Question
        </button>
    </main>

    <script>
        const questionDisplay = document.getElementById('question-display');
        const newQuestionBtn = document.getElementById('new-question-btn') as HTMLButtonElement;
        const loader = document.getElementById('loader');

        if (questionDisplay && newQuestionBtn && loader) {
            newQuestionBtn.addEventListener('click', async () => {
                // Show loader and hide text
                loader.classList.remove('hidden');
                questionDisplay.classList.add('hidden');
                newQuestionBtn.disabled = true;

                try {
                    // Get API key from environment variable
                    const GEMINI_API_KEY = import.meta.env.PUBLIC_GEMINI_API_KEY;
                    
                    // Check if API key is available
                    if (!GEMINI_API_KEY) {
                        throw new Error('Gemini API key is not configured. Please set the PUBLIC_GEMINI_API_KEY environment variable.');
                    }

                    const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;
                    
                    const questionPrompt = "Generate one, and only one, fun and lighthearted icebreaker question suitable for a professional team meeting. Do not add any preamble, quotation marks, or extra text. Just the question itself.";

                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            contents: [{
                                parts: [{ text: questionPrompt }]
                            }]
                        })
                    });

                    if (!response.ok) {
                        const errorBody = await response.text();
                        console.error("Gemini API Error:", errorBody);
                        throw new Error(`Gemini API responded with status: ${response.status}`);
                    }

                    const data = await response.json();
                    const question = data.candidates[0].content.parts[0].text.trim();
                    questionDisplay.textContent = question;
                } catch (error) {
                    console.error("Error fetching question:", error);
                    questionDisplay.textContent = "Sorry, something went wrong. Please try again!";
                } finally {
                    // Hide loader and show text
                    loader.classList.add('hidden');
                    questionDisplay.classList.remove('hidden');
                    newQuestionBtn.disabled = false;
                }
            });
        }
    </script>
</body>
</html> 